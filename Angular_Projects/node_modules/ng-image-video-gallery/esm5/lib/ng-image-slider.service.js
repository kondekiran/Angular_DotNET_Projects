/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-image-slider.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @type {?} */
var DESC = 'DESC';
/** @type {?} */
var ASC = 'ASC';
var NgImageSliderService = /** @class */ (function () {
    function NgImageSliderService() {
    }
    /**
     * @param {?} str
     * @return {?}
     */
    NgImageSliderService.prototype.isBase64 = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
        return base64regex.test(str);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    NgImageSliderService.prototype.base64FileExtension = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.substring("data:image/".length, str.indexOf(";base64"));
    };
    /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    NgImageSliderService.prototype.orderArray = /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    function (arr, orderType) {
        if (arr === void 0) { arr = []; }
        if (orderType === void 0) { orderType = ASC; }
        if ((arr === null || arr === void 0 ? void 0 : arr.length) && orderType) {
            return arr.sort((/**
             * @param {?} ob1
             * @param {?} ob2
             * @return {?}
             */
            function (ob1, ob2) {
                if (ob1['order'] === null || !ob1['order']) {
                    return 1;
                }
                else if (ob2['order'] === null || !ob2['order']) {
                    return -1;
                }
                else if (ob1['order'] > ob2['order']) {
                    if (orderType === DESC) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
                else if (ob1['order'] < ob2['order']) {
                    if (orderType === DESC) {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                }
            }));
        }
        return arr;
    };
    NgImageSliderService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgImageSliderService.ctorParameters = function () { return []; };
    return NgImageSliderService;
}());
export { NgImageSliderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1pbWFnZS12aWRlby1nYWxsZXJ5LyIsInNvdXJjZXMiOlsibGliL25nLWltYWdlLXNsaWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFFckMsSUFBSSxHQUFHLE1BQU07O0lBQ2YsR0FBRyxHQUFHLEtBQUs7QUFFZjtJQUdJO0lBQWdCLENBQUM7Ozs7O0lBRWpCLHVDQUFROzs7O0lBQVIsVUFBUyxHQUFHOztZQUNKLFdBQVcsR0FBRyxrRUFBa0U7UUFDcEYsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWpDLENBQUM7Ozs7O0lBRUQsa0RBQW1COzs7O0lBQW5CLFVBQW9CLEdBQUc7UUFDbkIsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7Ozs7OztJQUVELHlDQUFVOzs7OztJQUFWLFVBQVcsR0FBUSxFQUFFLFNBQWU7UUFBekIsb0JBQUEsRUFBQSxRQUFRO1FBQUUsMEJBQUEsRUFBQSxlQUFlO1FBQ2hDLElBQUksQ0FBQSxHQUFHLGFBQUgsR0FBRyx1QkFBSCxHQUFHLENBQUUsTUFBTSxLQUFJLFNBQVMsRUFBRTtZQUMxQixPQUFPLEdBQUcsQ0FBQyxJQUFJOzs7OztZQUFDLFVBQUMsR0FBRyxFQUFFLEdBQUc7Z0JBQ3JCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDeEMsT0FBTyxDQUFDLENBQUM7aUJBQ1o7cUJBQ0ksSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUM3QyxPQUFPLENBQUMsQ0FBQyxDQUFDO2lCQUNiO3FCQUNJLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDbEMsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO3dCQUNwQixPQUFPLENBQUMsQ0FBQyxDQUFDO3FCQUNiO3lCQUFNO3dCQUNILE9BQU8sQ0FBQyxDQUFDO3FCQUNaO2lCQUNKO3FCQUNJLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFFbEMsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO3dCQUNwQixPQUFPLENBQUMsQ0FBQztxQkFDWjt5QkFBTTt3QkFDSCxPQUFPLENBQUMsQ0FBQyxDQUFDO3FCQUNiO2lCQUNKO1lBQ0wsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Z0JBMUNKLFVBQVU7Ozs7SUEyQ1gsMkJBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQTFDWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5jb25zdCBERVNDID0gJ0RFU0MnLFxyXG4gICAgQVNDID0gJ0FTQyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOZ0ltYWdlU2xpZGVyU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICBpc0Jhc2U2NChzdHIpIHtcclxuICAgICAgICB2YXIgYmFzZTY0cmVnZXggPSAvXihbMC05YS16QS1aKy9dezR9KSooKFswLTlhLXpBLVorL117Mn09PSl8KFswLTlhLXpBLVorL117M309KSk/JC87XHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NHJlZ2V4LnRlc3Qoc3RyKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYmFzZTY0RmlsZUV4dGVuc2lvbihzdHIpIHtcclxuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cmluZyhcImRhdGE6aW1hZ2UvXCIubGVuZ3RoLCBzdHIuaW5kZXhPZihcIjtiYXNlNjRcIikpO1xyXG4gICAgfVxyXG5cclxuICAgIG9yZGVyQXJyYXkoYXJyID0gW10sIG9yZGVyVHlwZSA9IEFTQykge1xyXG4gICAgICAgIGlmIChhcnI/Lmxlbmd0aCAmJiBvcmRlclR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFyci5zb3J0KChvYjEsIG9iMikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iMVsnb3JkZXInXSA9PT0gbnVsbCB8fCAhb2IxWydvcmRlciddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvYjJbJ29yZGVyJ10gPT09IG51bGwgfHwgIW9iMlsnb3JkZXInXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9iMVsnb3JkZXInXSA+IG9iMlsnb3JkZXInXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmRlclR5cGUgPT09IERFU0MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9iMVsnb3JkZXInXSA8IG9iMlsnb3JkZXInXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmRlclR5cGUgPT09IERFU0MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9XHJcbn1cclxuIl19