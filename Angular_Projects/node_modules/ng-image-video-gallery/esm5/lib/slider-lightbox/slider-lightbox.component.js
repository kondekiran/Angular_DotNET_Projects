/**
 * @fileoverview added by tsickle
 * Generated from: lib/slider-lightbox/slider-lightbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __spread } from "tslib";
import { ChangeDetectorRef, Component, Inject, Input, Output, EventEmitter, ViewChild, HostListener, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
/** @type {?} */
var LIGHTBOX_NEXT_ARROW_CLICK_MESSAGE = 'lightbox next';
/** @type {?} */
var LIGHTBOX_PREV_ARROW_CLICK_MESSAGE = 'lightbox previous';
var SliderLightboxComponent = /** @class */ (function () {
    function SliderLightboxComponent(cdRef, sanitizer, elRef, document) {
        this.cdRef = cdRef;
        this.sanitizer = sanitizer;
        this.elRef = elRef;
        this.document = document;
        this.totalImages = 0;
        this.nextImageIndex = -1;
        this.popupWidth = 1200;
        this.marginLeft = 0;
        this.imageFullscreenView = false;
        this.lightboxPrevDisable = false;
        this.lightboxNextDisable = false;
        this.showLoading = true;
        this.effectStyle = 'none';
        this.speed = 1; // default speed in second
        // default speed in second
        this.title = '';
        this.currentImageIndex = 0;
        this.imageData = [];
        // @Inputs
        this.images = [];
        this.videoAutoPlay = false;
        this.direction = 'ltr';
        this.paginationShow = false;
        this.infinite = false;
        this.arrowKeyMove = true;
        this.showVideoControls = true;
        // @Output
        this.close = new EventEmitter();
        this.prevImage = new EventEmitter();
        this.nextImage = new EventEmitter();
        this.closeLightBox = new EventEmitter();
    }
    Object.defineProperty(SliderLightboxComponent.prototype, "imageIndex", {
        set: /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            if (index !== undefined && index > -1 && index < this.images.length) {
                this.currentImageIndex = index;
            }
            this.nextPrevDisable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderLightboxComponent.prototype, "show", {
        set: /**
         * @param {?} visiableFlag
         * @return {?}
         */
        function (visiableFlag) {
            this.imageFullscreenView = visiableFlag;
            this.elRef.nativeElement.ownerDocument.body.style.overflow = '';
            if (visiableFlag === true) {
                this.elRef.nativeElement.ownerDocument.body.style.overflow = 'hidden';
                // this.getImageData();
                this.setPopupSliderWidth();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderLightboxComponent.prototype, "animationSpeed", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data
                && typeof (data) === 'number'
                && data >= 0.1
                && data <= 5) {
                this.speed = data;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    SliderLightboxComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.effectStyle = 'none';
        this.setPopupSliderWidth();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SliderLightboxComponent.prototype.handleKeyboardEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && event.key && this.arrowKeyMove) {
            if (event.key.toLowerCase() === 'arrowright') {
                this.nextImageLightbox();
            }
            if (event.key.toLowerCase() === 'arrowleft') {
                this.prevImageLightbox();
            }
            if (event.key.toLowerCase() === 'escape') {
                this.closeLightbox();
            }
        }
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.imageData = __spread(this.images);
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.resetState();
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.setPopupSliderWidth = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (window && window.innerWidth) {
            this.popupWidth = window.innerWidth;
            this.totalImages = this.images.length;
            if (typeof (this.currentImageIndex) === 'number' && this.currentImageIndex !== undefined) {
                this.marginLeft = -1 * this.popupWidth * this.currentImageIndex;
                this.getImageData();
                this.nextPrevDisable();
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.showLoading = false;
                }), 500);
            }
        }
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.closeLightbox = /**
     * @return {?}
     */
    function () {
        this.close.emit();
        this.closeLightBox.emit(__spread(this.imageData));
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.prevImageLightbox = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.effectStyle = "all " + this.speed + "s ease-in-out";
        if (this.currentImageIndex > 0 && !this.lightboxPrevDisable && !this.infinite) {
            this.videoPause();
            this.currentImageIndex--;
            this.prevImage.emit(LIGHTBOX_PREV_ARROW_CLICK_MESSAGE);
            this.marginLeft = -1 * this.popupWidth * this.currentImageIndex;
            this.getImageData();
            this.nextPrevDisable();
        }
        if (this.infinite) {
            this.videoAutoPlay = false;
            this.videoPause();
            this.currentImageIndex--;
            this.prevImage.emit(LIGHTBOX_PREV_ARROW_CLICK_MESSAGE);
            this.marginLeft += this.popupWidth;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.effectStyle = 'none';
                _this.marginLeft -= _this.popupWidth;
                for (var i = 0; i < 1; i++) {
                    _this.images.unshift(_this.images[_this.images.length - 1]);
                    _this.images.pop();
                }
            }), this.speed * 1000);
            this.nextPrevDisable();
        }
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.videoPause = /**
     * @return {?}
     */
    function () {
        document.querySelectorAll('iframe').forEach((/**
         * @param {?} iframeUrl
         * @return {?}
         */
        function (iframeUrl) {
            if (iframeUrl.src.startsWith("https://www.youtube.com")) {
                iframeUrl.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', "*");
            }
            if (iframeUrl.src.indexOf('https://players.brightcove.net') !== -1) {
                iframeUrl.src = iframeUrl.src + '&muted';
            }
            if (iframeUrl.src.indexOf('https://player.vimeo.com') !== -1 || iframeUrl.src.indexOf('wistia') !== -1) {
                /** @type {?} */
                var data = { method: "pause" };
                iframeUrl.contentWindow.postMessage(JSON.stringify(data), "*");
            }
        }));
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.nextImageLightbox = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.effectStyle = "all " + this.speed + "s ease-in-out";
        if (this.currentImageIndex < this.images.length - 1 && !this.lightboxNextDisable && !this.infinite) {
            this.videoPause();
            this.currentImageIndex++;
            this.nextImage.emit(LIGHTBOX_NEXT_ARROW_CLICK_MESSAGE);
            this.marginLeft = -1 * this.popupWidth * this.currentImageIndex;
            this.getImageData();
            this.nextPrevDisable();
        }
        if (this.infinite) {
            this.videoAutoPlay = false;
            this.videoPause();
            this.nextImage.emit(LIGHTBOX_NEXT_ARROW_CLICK_MESSAGE);
            this.marginLeft -= this.popupWidth;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.effectStyle = 'none';
                for (var i = 0; i < 1; i++) {
                    _this.images.push(_this.images[0]);
                    _this.images.shift();
                }
                _this.marginLeft += _this.popupWidth;
            }), this.speed * 1000);
            this.nextPrevDisable();
        }
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.nextPrevDisable = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.lightboxNextDisable = true;
        this.lightboxPrevDisable = true;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.applyButtonDisableCondition();
        }), this.speed * 1000);
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.applyButtonDisableCondition = /**
     * @return {?}
     */
    function () {
        this.lightboxNextDisable = false;
        this.lightboxPrevDisable = false;
        if (!this.infinite && this.currentImageIndex >= this.images.length - 1) {
            this.lightboxNextDisable = true;
        }
        if (!this.infinite && this.currentImageIndex <= 0) {
            this.lightboxPrevDisable = true;
        }
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.getImageData = /**
     * @return {?}
     */
    function () {
        if (this.images
            && this.images.length
            && typeof (this.currentImageIndex) === 'number'
            && this.currentImageIndex !== undefined
            && this.images[this.currentImageIndex]
            && (this.images[this.currentImageIndex]['image'] || this.images[this.currentImageIndex]['video'])) {
            this.title = this.images[this.currentImageIndex]['title'] || '';
            this.galleryData = this.images[this.currentImageIndex];
            this.totalImages = this.images.length;
            for (var iframeI in this.document.getElementsByTagName('iframe')) {
                if (this.document.getElementsByTagName('iframe')[iframeI]
                    && this.document.getElementsByTagName('iframe')[iframeI].contentWindow
                    && this.document.getElementsByTagName('iframe')[iframeI].contentWindow.postMessage) {
                    this.document.getElementsByTagName('iframe')[iframeI].contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', '*');
                }
            }
            for (var videoI in this.document.getElementsByTagName('video')) {
                if (this.document.getElementsByTagName('video')[videoI] && this.document.getElementsByTagName('video')[videoI].pause) {
                    this.document.getElementsByTagName('video')[videoI].pause();
                }
            }
        }
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.resetState = /**
     * @return {?}
     */
    function () {
        this.images = [];
    };
    /**
     * Swipe event handler
     * Reference from https://stackoverflow.com/a/44511007/2067646
     */
    /**
     * Swipe event handler
     * Reference from https://stackoverflow.com/a/44511007/2067646
     * @param {?} e
     * @param {?} when
     * @return {?}
     */
    SliderLightboxComponent.prototype.swipeLightboxImg = /**
     * Swipe event handler
     * Reference from https://stackoverflow.com/a/44511007/2067646
     * @param {?} e
     * @param {?} when
     * @return {?}
     */
    function (e, when) {
        /** @type {?} */
        var coord = [e.changedTouches[0].pageX, e.changedTouches[0].pageY];
        /** @type {?} */
        var time = new Date().getTime();
        if (when === 'start') {
            this.swipeLightboxImgCoord = coord;
            this.swipeLightboxImgTime = time;
        }
        else if (when === 'end') {
            /** @type {?} */
            var direction = [coord[0] - this.swipeLightboxImgCoord[0], coord[1] - this.swipeLightboxImgCoord[1]];
            /** @type {?} */
            var duration = time - this.swipeLightboxImgTime;
            if (duration < 1000 //
                && Math.abs(direction[0]) > 30 // Long enough
                && Math.abs(direction[0]) > Math.abs(direction[1] * 3)) { // Horizontal enough
                if (direction[0] < 0) {
                    this.nextImageLightbox();
                }
                else {
                    this.prevImageLightbox();
                }
            }
        }
    };
    SliderLightboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'slider-lightbox',
                    template: "<div *ngIf=\"imageFullscreenView\" class=\"ng-image-fullscreen-view\">\r\n    <div class=\"lightbox-wrapper\" [ngClass]=\"galleryData?.image ? 'lightbox-wrapper-main' : ''\">\r\n        <a class=\"close\" (click)=\"closeLightbox()\"></a>\r\n        <div class=\"lightbox-div\" #lightboxDiv>\r\n          <div [ngClass]=\"galleryData?.image ? 'lightbox-header' : 'lightbox-video-header'\">\r\n            <div [ngClass]=\"{'show': title}\" class=\"image-title \">{{ galleryData?.title ? galleryData?.title : '' }}</div>\r\n          </div>\r\n            <div *ngIf=\"showLoading\" class=\"pre-loader\">\r\n                <div class=\"mnml-spinner\"></div>\r\n            </div>\r\n            <div class=\"lightbox-image-main\" [ngClass]=\"galleryData?.image ? 'lightbox-image-main-wrapper' : ''\"\r\n                [ngStyle]=\"{'margin-left': marginLeft + 'px', 'grid-template-columns': 'repeat('+images.length+',1fr)', 'transition': effectStyle}\">\r\n                <div class=\"lightbox-image\"\r\n                    [ngStyle]=\"{'width': popupWidth + 'px'}\"\r\n                    *ngFor=\"let img of images; let i = index\"\r\n                    [attr.id]=\"'ng-lightbox-image-' + i\"\r\n                    (touchstart)=\"swipeLightboxImg($event, 'start')\"\r\n                    (touchend)=\"swipeLightboxImg($event, 'end')\"\r\n                    #lightboxImageDiv>\r\n                    <custom-img\r\n                        [imageUrl]=\"img?.image || img?.video\"\r\n                        [isVideo]=\"!!(img?.posterImage || img?.video)\"\r\n                        [currentImageIndex]=\"currentImageIndex\"\r\n                        [imageIndex]=\"i\"\r\n                        [speed]=\"speed\"\r\n                        [videoAutoPlay]=\"videoAutoPlay && i == currentImageIndex\"\r\n                        [showVideoControls]=\"showVideoControls ? 1 : 0\"\r\n                        [alt]=\"img?.alt || img?.title || ''\"\r\n                        [title]=\"img?.title || img?.alt || ''\"\r\n                        [showVideo]=\"true\"\r\n                        [direction]=\"direction\">\r\n                    </custom-img>    \r\n            </div>\r\n            <!-- <div [dir]=\"direction\" [ngClass]=\"{'show': title, 'hide': !title}\" class=\"caption\">{{ title }}</div> -->\r\n            <a *ngIf=\"images.length > 1\" [ngClass]=\"{'disable': lightboxPrevDisable}\" class=\"prev icons prev-icon\" (click)=\"prevImageLightbox()\">&lsaquo;</a>\r\n            <a *ngIf=\"images.length > 1\" [ngClass]=\"{'disable': lightboxNextDisable}\" class=\"next icons next-icon\" (click)=\"nextImageLightbox()\">&rsaquo;</a>\r\n        </div>\r\n        <div [ngClass]=\"galleryData?.description ? 'lightbox-footer' : 'lightbox-video-footer' \">\r\n            <div  [ngClass]=\"galleryData?.description ? 'image-description' : ''\">{{ galleryData?.description ?  galleryData?.description : '' }}</div>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"paginationShow\" class=\"popup-pagination\">{{currentImageIndex + 1}} of {{totalImages}}</div>\r\n</div>\r\n",
                    styles: [".lightbox-header{color:#fff;padding:20px 45px}.lightbox-header .image-title{-webkit-box-orient:vertical;display:-webkit-box;-webkit-line-clamp:1;overflow:hidden;text-overflow:ellipsis;word-break:break-all}.lightbox-image-main-wrapper{margin-bottom:20px}.lightbox-footer{color:#fff;padding:20px}.lightbox-footer .image-description{text-align:center;-webkit-box-orient:vertical;display:-webkit-box;-webkit-line-clamp:5;overflow:hidden;text-overflow:ellipsis;word-break:break-all}"]
                }] }
    ];
    /** @nocollapse */
    SliderLightboxComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: DomSanitizer },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    SliderLightboxComponent.propDecorators = {
        lightboxDiv: [{ type: ViewChild, args: ['lightboxDiv', { static: false },] }],
        lightboxImageDiv: [{ type: ViewChild, args: ['lightboxImageDiv', { static: false },] }],
        lightboxTextDiv: [{ type: ViewChild, args: ['lightboxTextDiv', { static: false },] }],
        images: [{ type: Input }],
        imageIndex: [{ type: Input }],
        show: [{ type: Input }],
        videoAutoPlay: [{ type: Input }],
        direction: [{ type: Input }],
        paginationShow: [{ type: Input }],
        animationSpeed: [{ type: Input }],
        infinite: [{ type: Input }],
        arrowKeyMove: [{ type: Input }],
        showVideoControls: [{ type: Input }],
        close: [{ type: Output }],
        prevImage: [{ type: Output }],
        nextImage: [{ type: Output }],
        closeLightBox: [{ type: Output }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }],
        handleKeyboardEvent: [{ type: HostListener, args: ['document:keyup', ['$event'],] }]
    };
    return SliderLightboxComponent;
}());
export { SliderLightboxComponent };
if (false) {
    /** @type {?} */
    SliderLightboxComponent.prototype.totalImages;
    /** @type {?} */
    SliderLightboxComponent.prototype.nextImageIndex;
    /** @type {?} */
    SliderLightboxComponent.prototype.popupWidth;
    /** @type {?} */
    SliderLightboxComponent.prototype.marginLeft;
    /** @type {?} */
    SliderLightboxComponent.prototype.imageFullscreenView;
    /** @type {?} */
    SliderLightboxComponent.prototype.lightboxPrevDisable;
    /** @type {?} */
    SliderLightboxComponent.prototype.lightboxNextDisable;
    /** @type {?} */
    SliderLightboxComponent.prototype.showLoading;
    /** @type {?} */
    SliderLightboxComponent.prototype.effectStyle;
    /** @type {?} */
    SliderLightboxComponent.prototype.speed;
    /** @type {?} */
    SliderLightboxComponent.prototype.title;
    /** @type {?} */
    SliderLightboxComponent.prototype.currentImageIndex;
    /** @type {?} */
    SliderLightboxComponent.prototype.galleryData;
    /** @type {?} */
    SliderLightboxComponent.prototype.imageData;
    /**
     * @type {?}
     * @private
     */
    SliderLightboxComponent.prototype.swipeLightboxImgCoord;
    /**
     * @type {?}
     * @private
     */
    SliderLightboxComponent.prototype.swipeLightboxImgTime;
    /** @type {?} */
    SliderLightboxComponent.prototype.lightboxDiv;
    /** @type {?} */
    SliderLightboxComponent.prototype.lightboxImageDiv;
    /** @type {?} */
    SliderLightboxComponent.prototype.lightboxTextDiv;
    /** @type {?} */
    SliderLightboxComponent.prototype.images;
    /** @type {?} */
    SliderLightboxComponent.prototype.videoAutoPlay;
    /** @type {?} */
    SliderLightboxComponent.prototype.direction;
    /** @type {?} */
    SliderLightboxComponent.prototype.paginationShow;
    /** @type {?} */
    SliderLightboxComponent.prototype.infinite;
    /** @type {?} */
    SliderLightboxComponent.prototype.arrowKeyMove;
    /** @type {?} */
    SliderLightboxComponent.prototype.showVideoControls;
    /** @type {?} */
    SliderLightboxComponent.prototype.close;
    /** @type {?} */
    SliderLightboxComponent.prototype.prevImage;
    /** @type {?} */
    SliderLightboxComponent.prototype.nextImage;
    /** @type {?} */
    SliderLightboxComponent.prototype.closeLightBox;
    /**
     * @type {?}
     * @private
     */
    SliderLightboxComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    SliderLightboxComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    SliderLightboxComponent.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    SliderLightboxComponent.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,